/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode merge2Lists(ListNode list1,ListNode list2){
        ListNode res = new ListNode();
        ListNode head = res;
        while(list1!=null &&list2!=null){
            if (list1.val<list2.val){
                res.next = list1;
                res = res.next;
                list1 = list1.next;
            }else if(list1.val>list2.val){
                res.next = list2;
                res = res.next;
                list2 = list2.next;
            }else{
                res.next = list1;
                list1 = list1.next;
                res.next.next = list2;
                list2 = list2.next;
                res = res.next.next; 
            }
        }
        while(list1!=null) {
        	res.next = list1;
        	list1 = list1.next;
        	res = res.next;
        }
        while(list2!=null) {
        	res.next = list2;
        	list2 = list2.next;
        	res = res.next;
        }
        return head.next;
    }
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length==0 || (lists.length==1&&lists[0]==null)) return null; 
        if(lists.length==1) return lists[0];
        ListNode node = merge2Lists(lists[0],lists[1]);
        int i=2;
        while(i<lists.length){
            node = merge2Lists(node,lists[i]);
            i++;
        }
        return node;
    }
}