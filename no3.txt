package ZX.leetcode.no3;

import java.util.HashSet;
import java.util.Set;

public class Solution {
	public static int lengthOfLongestSubstring(String s) {
		if(s.length()<2) return s.length();
		int maxLength = 1;
		int len = 1;
		Set<Character> set = new HashSet<>();
		for(int i=0;i<s.length();i++) {
			set.add(s.charAt(i));
			for(int j=i+1;j<s.length();j++) {
				if(set.contains(s.charAt(j))) {
					maxLength = set.size()>maxLength?set.size():maxLength;
					set.clear();
					//set.add(s.charAt(j));
					break;
				}
				set.add(s.charAt(j));	
			}
			
		}
		//for(char c:set) System.out.println("c: "+c);
		maxLength = set.size()>maxLength?set.size():maxLength;
		return maxLength;
	}
	
	public static void main(String[] args) {
		System.out.println(lengthOfLongestSubstring("dvdf"));
	}
	
	
	/*
	 * public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        if(n==0) return 0;
        Set<Character> set = new HashSet<>();
        int ans=1,i=0,j=1;
        set.add(s.charAt(i));
        while (i<n&&j<n){        
            if(set.contains(s.charAt(j))){
                ans = Math.max(ans,j-i);
                i=i+1;
                j=i+1;
                set.clear();
                set.add(s.charAt(i));
            }else{
                set.add(s.charAt(j));
                j++;
                ans = Math.max(ans,j-i);
            }

        }
        return ans;
        
    }
	 */

}
